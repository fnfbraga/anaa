{
  "version": 3,
  "sources": ["../../svelte-popperjs/dist/index.es.js"],
  "sourcesContent": ["import { createPopper } from '@popperjs/core';\nimport { onDestroy } from 'svelte';\n\nfunction createPopperActions(initOptions) {\n    let popperInstance = null;\n    let referenceNode;\n    let contentNode;\n    let options = initOptions;\n    const initPopper = () => {\n        if (referenceNode !== undefined && contentNode !== undefined) {\n            popperInstance = createPopper(referenceNode, contentNode, options);\n        }\n    };\n    const deinitPopper = () => {\n        if (popperInstance !== null) {\n            popperInstance.destroy();\n            popperInstance = null;\n        }\n    };\n    const referenceAction = (node) => {\n        if ('subscribe' in node) {\n            setupVirtualElementObserver(node);\n            return {};\n        }\n        else {\n            referenceNode = node;\n            initPopper();\n            return {\n                destroy() {\n                    deinitPopper();\n                },\n            };\n        }\n    };\n    const setupVirtualElementObserver = (node) => {\n        const unsubscribe = node.subscribe(($node) => {\n            if (referenceNode === undefined) {\n                referenceNode = $node;\n                initPopper();\n            }\n            else {\n                // Preserve the reference to the virtual element.\n                Object.assign(referenceNode, $node);\n                popperInstance?.update();\n            }\n        });\n        onDestroy(unsubscribe);\n    };\n    const contentAction = (node, contentOptions) => {\n        contentNode = node;\n        options = { ...initOptions, ...contentOptions };\n        initPopper();\n        return {\n            update(newContentOptions) {\n                options = { ...initOptions, ...newContentOptions };\n                popperInstance?.setOptions(options);\n            },\n            destroy() {\n                deinitPopper();\n            },\n        };\n    };\n    return [referenceAction, contentAction, () => popperInstance];\n}\n\nexport { createPopperActions };\n"],
  "mappings": ";;;;;;;;;AAGA,SAAS,oBAAoB,aAAa;AACtC,MAAI,iBAAiB;AACrB,MAAI;AACJ,MAAI;AACJ,MAAI,UAAU;AACd,QAAM,aAAa,MAAM;AACrB,QAAI,kBAAkB,UAAa,gBAAgB,QAAW;AAC1D,uBAAiB,aAAa,eAAe,aAAa,OAAO;AAAA,IACrE;AAAA,EACJ;AACA,QAAM,eAAe,MAAM;AACvB,QAAI,mBAAmB,MAAM;AACzB,qBAAe,QAAQ;AACvB,uBAAiB;AAAA,IACrB;AAAA,EACJ;AACA,QAAM,kBAAkB,CAAC,SAAS;AAC9B,QAAI,eAAe,MAAM;AACrB,kCAA4B,IAAI;AAChC,aAAO,CAAC;AAAA,IACZ,OACK;AACD,sBAAgB;AAChB,iBAAW;AACX,aAAO;AAAA,QACH,UAAU;AACN,uBAAa;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACA,QAAM,8BAA8B,CAAC,SAAS;AAC1C,UAAM,cAAc,KAAK,UAAU,CAAC,UAAU;AAC1C,UAAI,kBAAkB,QAAW;AAC7B,wBAAgB;AAChB,mBAAW;AAAA,MACf,OACK;AAED,eAAO,OAAO,eAAe,KAAK;AAClC,yDAAgB;AAAA,MACpB;AAAA,IACJ,CAAC;AACD,cAAU,WAAW;AAAA,EACzB;AACA,QAAM,gBAAgB,CAAC,MAAM,mBAAmB;AAC5C,kBAAc;AACd,cAAU,EAAE,GAAG,aAAa,GAAG,eAAe;AAC9C,eAAW;AACX,WAAO;AAAA,MACH,OAAO,mBAAmB;AACtB,kBAAU,EAAE,GAAG,aAAa,GAAG,kBAAkB;AACjD,yDAAgB,WAAW;AAAA,MAC/B;AAAA,MACA,UAAU;AACN,qBAAa;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AACA,SAAO,CAAC,iBAAiB,eAAe,MAAM,cAAc;AAChE;",
  "names": []
}
